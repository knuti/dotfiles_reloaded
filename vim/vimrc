"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Sets how many lines of history VIM has to remember
set history=1000

" Enable filetype plugins
filetype plugin on
filetype indent on
" filetype on

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
"let mapleader = ","
let mapleader = "\<Space>"

" Fast saving
nmap <leader>w :w!<cr>

" :W sudo saves the file
" (useful for handling the permission-denied error)
command W w !sudo tee % > /dev/null

" Show the line numbers on a files side
set number
set relativenumber
map <leader>non :set number!<cr>:set relativenumber!<cr>

" necessary for mappings to work
set nocompatible


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Always display the status bar

" Set scrolloff - when moving vertically using j/k, number of lines left to top/bottom
set so=5

" Display status bar with current cursor position
set ruler

" Turn on the WiLd menu (bottom of editor)
set wildmenu

" Ignore compiled files
set wildignore+=*/coverage/*,*.o,*~,*.pyc,*.swp,*.swo,*.swp,*.zip,*.gz
if has("win16") || has("win32")
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
    set wildignore+=.git\*,.hg\*,.svn\*
endif

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic
set re=1

" No annoying sound (errobell/eb) on errors
set noerrorbells
" No flashing screen on error or instead of beep (visualbell/vb)
set novisualbell
" Clearing error notifications
set t_vb=
set tm=500


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines
set bs=2


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Smart way to move between windows
map <leader>h <C-w>h
map <leader>j <C-w>j
map <leader>k <C-w>k
map <leader>l <C-w>l

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :bufdo bd<cr>

" Manage Buffer
map <leader>bn :bnext<cr>
map <leader>bp :bprevious<cr>

" Useful mappings for managing tabs
map <leader>t :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>tn :tabnext<CR>
map <leader>tp :tabprevious<CR>

" Disable arrow keys
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

autocmd FileWritePre,FileAppendPre,FilterWritePre,BufWritePre * if &ft!~?'markdown'|:call <SID>StripTrailingWhitespaces()|endif
function! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

function ChangeBackgroundColor()
  if &background == "light"
    set background=dark
    colorscheme hybrid
  elseif &background == "dark"
    set background=light
    colorscheme gruvbox
  endif
:endfunction
nnoremap <leader>cbc :call ChangeBackgroundColor()<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Ag searching and cope displaying
"    requires ag.vim - it's much better than vimgrep/grep
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" When you press gv you Ag after the selected text
vnoremap <silent> gv :call VisualSelection('gv', '')<CR>

" Open Ag and put the cursor in the right position
map <leader>a :Ag<Space>
let g:ag_prg="ag --nogroup --column"

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>

" Do :help cope if you are unsure what cope is. It's super useful!
"
" When you search with Ag, display your results in cope by doing:
"   <leader>cc
"
" To go to the next search result do:
"   <leader>n
"
" To go to the previous search results do:
"   <leader>p
"
map <leader>cc :botright cope<cr>
map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
map <leader>n :cn<cr>
map <leader>p :cp<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin management
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

call plug#begin('~/.vim/plugged')

Plug 'morhetz/gruvbox'        " colorscheme
Plug 'w0ng/vim-hybrid'

Plug 'sheerun/vim-polyglot'   " syntax highlighting
Plug '/usr/local/opt/fzf'     " Fuzzy file finder
Plug 'junegunn/fzf.vim'       " plug fzf to vim

Plug 'tpope/vim-surround'     " change surroundings: cs[{
Plug 'tpope/vim-commentary'   " easy comment out stuff (gc[c])
Plug 'tpope/vim-fugitive'     " git wrapper
Plug 'rking/ag.vim'           " Used as replacement for grep, requires the_silver_searcher
Plug 'craigemery/vim-autotag' " Should generate tag list...
Plug 'dgraham/vim-eslint'     " required for JSX files
Plug 'mxw/vim-jsx'
Plug 'prettier/vim-prettier'

" On the fly syntax checking
Plug 'w0rp/ale'

Plug 'tpope/vim-endwise'      " put an end to things
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-bundler', { 'for': 'ruby' }
Plug 'mhinz/vim-mix-format', { 'for': 'elixir' }
Plug 'skywind3000/asyncrun.vim'

Plug 'leafgarland/typescript-vim'
Plug 'Quramy/tsuquyomi'
Plug 'Shougo/vimproc.vim', { 'do': 'make -f make_mac.mak' }
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh --clang-completer --system-libclang --omnisharp-completer' }
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

call plug#end()

" === Additional Plugin configuration ===

" Polyglot
let g:jsx_ext_required = 1

" NERDTree
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

map <F2> :NERDTreeToggle<CR>
nnoremap <leader>n :NERDTreeToggle<CR>
" Enable NERDTree to display hidden files
let NERDTreeShowHidden=1

" FZF
set rtp+=/usr/local/opt/fzf
map <leader>o :FZF<CR>
let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" vim-jsx
" Allow JSX in normal JS files
let g:jsx_ext_required = 0

" ale
let g:ale_linters = {'jsx': ['stylelint', 'eslint']}
let g:ale_linter_aliases = {'jsx': 'css'}
let g:ale_lint_on_enter = 0

" asyncrun
autocmd BufWritePost *.js AsyncRun -post=checktime ~/node_modules/.bin/eslint --fix %

" YouCompleteMe
if !exists("g:ycm_semantic_triggers")
  let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers['typescript'] = ['.']

" airline
let g:airline_powerline_fonts = 1
let g:airline_theme='hybrid'
set noshowmode " remove additional staus line

" hybrid
let g:hybrid_custom_term_colors = 1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" Easy close files
map <leader>c <C-w>c

" Open help menu
map! <F1> <Esc>

" load matchit (% to bounce from do to end, etc.)
runtime! macros/matchit.vim

" Tweak EasyGrep
let g:EasyGrepMode = 2
let g:EasyGrepRecursive = 1

" Markdown
augroup mkd
  autocmd BufRead *.mkd  set ai formatoptions=tcroqn2 comments=n:&gt;
augroup END

" Used for auto completion, once pressing TAB or CTRL-C
" inoremap <tab> <c-r>=Smart_TabComplete()<CR>
" inoremap <expr> <C-Space> pumvisible() \|\| &omnifunc == '' ?
"       \ "\<lt>C-n>" :
"       \ "\<lt>C-x>\<lt>C-o><c-r>=pumvisible() ?" .
"       \ "\"\\<lt>c-n>\\<lt>c-p>\\<lt>c-n>\" :" .
"       \ "\" \\<lt>bs>\\<lt>C-n>\"\<CR>"
" imap <C-@> <C-Space>

" open vimrc
nnoremap <leader>ev :e ~/.vimrc<CR>
nnoremap <leader>vs :so ~/.vimrc<CR>

" use zfap -> fold a paragraph
nnoremap <leader>z zfap

" call formatter for Elixir
nmap <leader>mf :MixFormat<CR>

" resizing options
nmap <leader>re :resize
nmap <leader>vr :vertical resize

" rebuilding tag list
noremap <leader>rt :!ctags -f tags --extra=+f --fields=+l --exclude=tmp --exclude=log --exclude=node_modules --exclude=vendor -R *<CR><CR>
" show tag list
noremap <F4> <Esc>:TlistToggle<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("Ag \"" . l:pattern . "\" " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" Expan on pressing tab and gives suggestions
function! Smart_TabComplete()
  let line = getline('.')                         " curline
  let substr = strpart(line, -1, col('.')+1)      " from start to cursor
  let substr = matchstr(substr, "[^ \t]*$")       " word till cursor
  if (strlen(substr)==0)                          " nothing to match on empty string
    return "\<tab>"
  endif
  let has_period = match(substr, '\.') != -1      " position of period, if any
  let has_slash = match(substr, '\/') != -1       " position of slash, if any
  if (!has_period && !has_slash)
    return "\<C-X>\<C-P>"                         " existing text matching
  elseif ( has_slash )
    return "\<C-X>\<C-F>"                         " file matching
  else
    return "\<C-X>\<C-O>"                         " plugin matching
  endif
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Enable syntax highlighting
syntax on
syntax enable

set background=dark

" colorscheme gruvbox
colorscheme hybrid

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

au BufNewFile,BufRead *.j setf objj

highlight Pmenu ctermbg=5 guibg=#004e9c

set guifont=Monaco:h13
